;==========================================================
;
;
;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗
;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗
;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝
;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗
;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║
;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
;
;
;   To learn more about how to configure Polybar
;   go to https://github.com/polybar/polybar
;
;   The README contains a lot of information
;
;==========================================================

[colors]
background = #1c2128
background-alt = #2d333b
foreground = #adbac7
primary = #ff8700
secondary = #f0b746
all_fine = #00af87
warning = #f35757 
alert = #d7005f
disabled = #707880

[bar/bar_1]
monitor = ${env:MONITOR:}
width = 100%
height = 26pt
radius = 0
enable-tray = true
tray-position = right

; dpi = 96

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 3pt

border-size = 4pt
border-color = #00000000

padding-left = 0
padding-right = 1

module-margin = 1

separator = |
separator-foreground = ${colors.disabled}

font-0 = "JetBrainsMono Nerd Font:size=16;2"

; WARN: Don't forget to add custom modules!
; missing: xkeyboard
modules-left = i3 xwindow
modules-right = battery spotify spotify-prev spotify-play-pause spotify-next sound-control brightness power_consumption memory cpu temperature informations eth wlan network bluetooth timer chronometer uptime toggle_time date powermenu

cursor-click = pointer
cursor-scroll = ns-resize

enable-ipc = true

; tray-position = right

; wm-restack = generic
; wm-restack = bspwm
; wm-restack = i3

; override-redirect = true

; dont forget to build polybar with i3 support
[module/i3]
type = internal/i3

; Only show workspaces defined on the same output as the bar
pin-workspaces = true


; This will split the workspace name on ':'
; Default: false
strip-wsnumbers = true

; Sort the workspaces by index instead of the default
; sorting that groups the workspaces by output
; Default: false
index-sort = true

format = <label-state> <label-mode>

; i3 mode
label-mode = %mode%
label-mode-padding = 2
label-mode-background = ${colors.warning}

label-focused =%name%
label-focused-background = ${colors.background-alt}
label-focused-underline = ${colors.primary} 
label-focused-foreground = ${colors.foreground}
label-focused-padding = 1

label-unfocused =%name%
label-unfocused-padding = 1

label-separator = |
label-separator-padding = 0
label-separator-foreground = ${colors.disabled}

[module/xwindow]
type = internal/xwindow
label = %title:0:15:...%


; --------------------------------------------- left ---------------------------------------------

# ........... audio ...........

[module/sound-control]
type = custom/script

exec = %PLACEHOLDER_CONFIG_FOLDER%/spotify/pipewire.sh
interval = 1
click-middle = pavucontrol &
click-left = %PLACEHOLDER_CONFIG_FOLDER%/spotify/pipewire.sh --mute &
scroll-up = %PLACEHOLDER_CONFIG_FOLDER%/spotify/pipewire.sh --up &
scroll-down = %PLACEHOLDER_CONFIG_FOLDER%/spotify/pipewire.sh --down &
click-right = sh %PLACEHOLDER_CONFIG_FOLDER%/bar_control/toggle_spotify.sh


[module/spotify]
type = custom/script
tail = true
interval = 1
; prefix symbol is shown before the text
format-prefix = " "
format = <label>
exec = sh %PLACEHOLDER_CONFIG_FOLDER%/spotify/scroll_spotify_status.sh

[module/spotify-prev]
type = custom/script
exec = echo "󰒮"
format = <label>
click-left = playerctl previous -p spotify

[module/spotify-play-pause]
type = custom/ipc
hook-0 = echo ""
hook-1 = echo ""
initial = 1
click-left = playerctl play-pause -p spotify

[module/spotify-next]
type = custom/script
exec = echo "󰒭"
format = <label>
click-left = playerctl next -p spotify

# ........... autre ...........

[module/brightness]
type = custom/script
exec = echo $(brightnessctl get) / $(brightnessctl max) | bc -l | awk '{printf "%.0f", $1 * 100}'
click-left = brightnessctl set +10%
click-right = brightnessctl set 10%-
scroll-up = brightnessctl set +10% && echo $(brightnessctl get) / $(brightnessctl max) | bc -l | awk '{printf "%.0f", $1 * 100}'
scroll-down = brightnessctl set 10%- && echo $(brightnessctl get) / $(brightnessctl max) | bc -l | awk '{printf "%.0f", $1 * 100}'
format-prefix = "󱩏 "
format-prefix-foreground = ${colors.primary}
tail = true
interval = 5

[module/battery]
type = internal/battery

; This is useful in case the battery never reports 100% charge
; Default: 100
full-at = 99

; format-low once this charge percentage is reached
; Default: 10
; New in version 3.6.0
low-at = 20

; Use the following command to list batteries and adapters: WARN : Hardware dependant
; $ ls -1 /sys/class/power_supply/
battery = &BATTERY_HARDWARE&
adapter = &ADAPTER_HARDWARE&

; If an inotify event haven't been reported in this many
; seconds, manually poll for new values.
; Needed as a fallback for systems that don't report events
; on sysfs/procfs.
; Disable polling by setting the interval to 0.
; Default: 5
poll-interval = 5
; see "man date" for details on how to format the time string
; NOTE: if you want to use syntax tags here you need to use %%{...}
; Default: %H:%M:%S
time-format = %H:%M

; Available tags:
;   <label-charging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-charging>
format-charging = <animation-charging>  <label-charging>

; Available tags:
;   <label-discharging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-discharging>
format-discharging = <ramp-capacity>  <label-discharging>

; Available tags:
;   <label-full> (default)
;   <bar-capacity>
;   <ramp-capacity>
format-full = <ramp-capacity> <label-full>

; Format used when battery level drops to low-at
; If not defined, format-discharging is used instead.
; Available tags:
;   <label-low>
;   <animation-low>
;   <bar-capacity>
;   <ramp-capacity>
; New in version 3.6.0
format-low = <animation-low> <label-low> <animation-low> <ramp-capacity>  <label-discharging>

; Available tokens:
;   %percentage% (default) - is set to 100 if full-at is reached
;   %percentage_raw%
;   %time%
;   %consumption% (shows current charge rate in watts)
label-charging = %percentage%%

; Available tokens:
;   %percentage% (default) - is set to 100 if full-at is reached
;   %percentage_raw%
;   %time%
;   %consumption% (shows current discharge rate in watts)
label-discharging = %percentage%% %time%

; Available tokens:
;   %percentage% (default) - is set to 100 if full-at is reached
;   %percentage_raw%
label-full = Fully charged

; Available tokens:
;   %percentage% (default) - is set to 100 if full-at is reached
;   %percentage_raw%
;   %time%
;   %consumption% (shows current discharge rate in watts)
; New in version 3.6.0
label-low = BATTERY LOW

; Only applies if <ramp-capacity> is used
ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 
ramp-capacity-foreground = ${colors.foreground}
ramp-capacity-1-foreground = ${colors.warning}
ramp-capacity-0-foreground = ${colors.alert}

; Only applies if <bar-capacity> is used
bar-capacity-width = 10

; Only applies if <animation-charging> is used
animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-foreground = ${colors.all_fine}

; Framerate in milliseconds
animation-charging-framerate = 1000

; Only applies if <animation-discharging> is used
animation-discharging-0 = 
animation-discharging-1 = 
animation-discharging-2 = 
animation-discharging-3 = 
animation-discharging-4 = 
; Framerate in milliseconds
animation-discharging-framerate = 500

; Only applies if <animation-low> is used
; New in version 3.6.0
animation-low-0 = 
animation-low-1 = 
animation-low-framerate = 200
animation-low-foreground = ${colors.alert}

# Change color and format based on battery level
label-discharging-foreground = ${self.ramp-capacity-foreground}
label-charging-foreground = ${self.ramp-capacity-foreground}
label-full-foreground = ${self.ramp-capacity-foreground}





; informations .............................................

[module/filesystem]
type = internal/fs
interval = 25

mount-0 = /
mount-1 = /home

label-mounted = %{F#F0C674}%mountpoint%%{F-} %percentage_used%%

label-unmounted = %mountpoint% not mounted
label-unmounted-foreground = ${colors.disabled}


[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

label-layout = %layout%
label-layout-foreground = ${colors.primary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-foreground = ${colors.background}
label-indicator-background = ${colors.secondary}

[module/power_consumption]
type = custom/script
exec = awk 'BEGIN {sum=1} {sum*=$1} END {print sum*1e-12 " W"}' /sys/class/power_supply/BAT0/current_now /sys/class/power_supply/BAT0/voltage_now
interval = 10

format = 󱄉 <label>
format-padding = 0
format-background = ${colors.background}
format-foreground = ${colors.primary}

[module/memory]
type = internal/memory
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.primary}
label = %percentage_used:2%%

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.primary}
label = %percentage:2%%

[module/temperature]
type = internal/temperature
interval = 5
format-prefix = "󰏈 "
format-prefix-foreground = ${colors.primary}
label = %temperature-c%

# display cpu, memory and temperature modules only if clicked
[module/informations]
type = custom/text
content = 󰙎
content-background = ${colors.background}
content-foreground = ${colors.foreground}
content-padding = 0
click-left = sh %PLACEHOLDER_CONFIG_FOLDER%/bar_control/toggle_informations.sh

; network .............................................

[network-base]
type = internal/network
interval = 5
format-connected = <ramp-signal> <label-connected>
format-disconnected = <label-disconnected>
label-disconnected = %{F#F0C674}%ifname%%{F#707880} 

; Only applies if <ramp-signal> is used
ramp-signal-0 = 󰢿
ramp-signal-1 = 󰢼
ramp-signal-2 = 󰢽
ramp-signal-3 = 󰢾
ramp-signal-0-foreground = ${colors.warning}
ramp-signal-1-foreground = ${colors.secondary}
ramp-signal-2-foreground = ${colors.foreground}
ramp-signal-3-foreground = ${colors.all_fine}

[module/wlan]
inherit = network-base
label-connected = %{A1:nm-connection-editor:}%signal%%%{A}
label-connected-foreground = ${colors.foreground}
interface-type = wireless
; label-connected = %{F#F0C674}%ifname%%{F-} %essid% %local_ip%
click-left = "exec nm-connection-editor"

[module/eth]
inherit = network-base
interface-type = wired
label-connected = %{F#F0C674}%ifname%%{F-} %local_ip%



# display the wlan module and the eth module only if clicked
[module/network]
type = custom/text
content = 󰀂
content-background = ${colors.background}
content-foreground = ${colors.foreground}
content-padding = 0
click-left = sh %PLACEHOLDER_CONFIG_FOLDER%/bar_control/toggle_network.sh

[module/bluetooth]
type = custom/script
exec = sh %PLACEHOLDER_CONFIG_FOLDER%/bluetooth/bluetooth.sh
interval = 2
click-left = exec blueberry
click-right = exec sh %PLACEHOLDER_CONFIG_FOLDER%/bluetooth/toggle_bluetooth.sh
format-padding = 0
format-background = ${colors.background}
format-foreground = ${colors.foreground}


; time .............................................


[module/chronometer]
type = custom/script
exec = my_script chronometer display
interval = 1
click-left = my_script chronometer toggle
click-right = my_script chronometer reset

format =  <label>
format-padding = 0
format-background = ${colors.background}
format-foreground = ${colors.primary}

[module/timer]
type = custom/script
exec = my_script timer display
interval = 1
click-left = my_script timer toggle
click-right = my_script timer reset
scroll-up = my_script timer add 5
scroll-down = my_script timer add -5

format = 󰔛 <label>
format-padding = 0
format-background = ${colors.background}
format-foreground = ${colors.primary}


[module/uptime]
type = custom/script
exec = my_script uptime
click-left = my_script uptime -display_entry


; Seconds to sleep between updates
; Default: 5 (0 if `tail = true`)
interval = 60

format = 󰄉 <label>
format-padding = 0
format-background = ${colors.background}
format-foreground = ${colors.primary}

# display the time module only if clicked
[module/toggle_time]
type = custom/text
content = 󱫢
content-background = ${colors.background}
content-foreground = ${colors.foreground}
content-padding = 0
click-left = sh %PLACEHOLDER_CONFIG_FOLDER%/bar_control/toggle_time.sh


[module/date]
type = internal/date
interval = 1

date = %H:%M
date-alt = %Y-%m-%d %H:%M:%S

label = %date%
label-foreground = ${colors.primary}



[module/powermenu]
type = custom/script
exec = echo ""  ;# or use an icon like ""
#exec-foreground = ${colors.power}
click-left = my_script logout_menu


;type = custom/menu
; expand-right = true
; format-spacing = 1
; label-open = 
; label-open-foreground = ${colors.power}
; label-close = cancel
; label-close-foreground = ${colors.power}
; label-separator = |
; label-separator-foreground = ${colors.foreground-alt}
; # reboot
; menu-0-0 = reboot
; menu-0-0-foreground = ${colors.secondary}
; menu-0-0-exec = reboot
; # power off
; menu-0-1 = power off
; menu-0-1-foreground = ${colors.warning}
; menu-0-1-exec = poweroff
; # logout
; menu-0-2 = Logout
; menu-0-2-exec = i3-msg exit


[settings]
screenchange-reload = true
pseudo-transparency = true

; vim:ft=dosini
